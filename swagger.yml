swagger: "2.0"
info:
  description: "sampleapi"
  version: "1.0.0"
  title: "sampleapi"
host: "mockend.com"
basePath: "/jow5/mockend-registration/"
tags:
- name: "posts"
  description: "posts"
schemes:
- "https"
- "http"
paths:
  /posts:
    get:
      tags:
      - "posts"
      summary: "Add a new post"
      description: ""
      operationId: "getPosts"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        "400":
          description: "Invalid status value"
  /post:
    post:
      tags:
      - "posts"
      summary: "Add a new post"
      description: ""
      operationId: "addPost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "post object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Post"
      responses:
        "405":
          description: "Invalid input"
      security:
      - api_key: []
  /post/{postId}:
    get:
      tags:
      - "posts"
      summary: "Find post by ID"
      description: "Returns a single post"
      operationId: "getPostById"
      produces:
      - "application/json"
      parameters:
      - name: "postId"
        in: "path"
        description: "ID of post to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Post"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Post not found"
      security:
      - api_key: []
    post:
      tags:
      - "posts"
      summary: "Updates a post in the store with json data"
      description: ""
      operationId: "updatePost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "postId"
        in: "path"
        description: "ID of post to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "post object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Post"
      responses:
        "405":
          description: "Invalid input"
      security:
      - api_key: []
    delete:
      tags:
      - "posts"
      summary: "Deletes a post"
      description: ""
      operationId: "deletePost"
      produces:
      - "application/json"
      parameters:
      - name: "postId"
        in: "path"
        description: "Post id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Post not found"
      security:
      - api_key: []
  /registrations:
    get:
      tags:
      - "registrations"
      summary: "Add a new post"
      description: ""
      operationId: "getRegistrations"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Registration"
        "400":
          description: "Invalid status value"
  /registration:
    post:
      tags:
      - "registrations"
      summary: "Add a new Registration"
      description: ""
      operationId: "addRegistration"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Registration object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Registration"
      responses:
        "405":
          description: "Invalid input"
      security:
      - api_key: []
  /registration/{regId}:
    get:
      tags:
      - "registrations"
      summary: "Find Registration by ID"
      description: "Returns a single Registration"
      operationId: "getRegistrationById"
      produces:
      - "application/json"
      parameters:
      - name: "regId"
        in: "path"
        description: "ID of Registration to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Registration"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Registration not found"
      security:
      - api_key: []
    post:
      tags:
      - "registrations"
      summary: "Updates a post in the store with json data"
      description: ""
      operationId: "updateRegistration"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "regId"
        in: "path"
        description: "ID of Registration to return"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "post object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Registration"
      responses:
        "405":
          description: "Invalid input"
      security:
      - api_key: []
    delete:
      tags:
      - "registrations"
      summary: "Deletes a Registration"
      description: ""
      operationId: "deleteRegistration"
      produces:
      - "application/json"
      parameters:
      - name: "regId"
        in: "path"
        description: "Registration id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Registration not found"
      security:
      - api_key: []
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Post:
    type: "object"
    required:
    - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      userId:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "doggie"
      body:
        type: "string"
        example: "doggie"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  Registration:
    type: "object"
    required:
    - "FirstName"
    properties:
      Id:
        type: "string"
        example: "a0T7c000002G2QLEA0"
      Name:
        type: "string"
        example: "RG-0002"
      OwnerId:
        type: "string"
        example: "0055Y00000DX25ZQAT"
      Event:
        type: "string"
        example: "a0S7c000003vLJUEA2"
      FirstName:
        type: "string"
        example: "James"
      LastName:
        type: "string"
        example: "White"
      Email:
        type: "string"
        example: "jake.invalid@invalid.com"
      Address:
        type: "string"
        example: "1 Anywhere Lane"
      ContactNumber:
        type: "string"
        example: "123-456-7890"
      LightEquipmentNeedForTravel:
        type: "string"
        example: ""
      Equipment_Procured:
        type: "boolean"
        example: false
      WhichDayOfTheWeekDoYouWork:
        type: "string"
        example: "Friday"
      HowManyHoursDoYouWork:
        type: "integer"
        format: "int64"
      HowManyYearsOfExperience:
        type: "integer"
        format: "int64"
      IfNoManagerDetails:
        type: "string"
        example: ""
      LastProjectWorkedOn:
        type: "string"
        example: "Genesis"
        